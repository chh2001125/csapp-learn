                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6a801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	    xorq %rax,%rax	    # count1 = 0;
0x034: c0f2fdffffffffffffff |         iaddq $-3,%rdx	    # limit = len -1 <= 0?
0x03e: 711201000000000000   | 	    jle Done1	        # if so, goto Done:
0x047: 50a70000000000000000 | Loop1:	mrmovq (%rdi), %r10	# read val from src...
0x051: 40a60000000000000000 | 	    rmmovq %r10, (%rsi) # ...and store it to dst
0x05b: 50970800000000000000 |         mrmovq 8(%rdi), %r9 # read val from src...
0x065: 40960800000000000000 |         rmmovq %r9, 8(%rsi) # ...and store it to dst
0x06f: 50871000000000000000 |         mrmovq 16(%rdi), %r8 # read val from src...
0x079: 40861000000000000000 |         rmmovq %r8, 16(%rsi) # ...and store it to dst
0x083: 50b71800000000000000 |         mrmovq 24(%rdi), %r11 # read val from src...
0x08d: 40b61800000000000000 |         rmmovq %r11, 24(%rsi) # ...and store it to dst
0x097: 62aa                 | 	    andq %r10, %r10	    # val <= 0?
0x099: 71ac00000000000000   | 	    jle Npos1	        # if so, goto Npos:
0x0a2: c0f00100000000000000 | 	    iaddq $1, %rax	    # count++
0x0ac:                      | Npos1:
0x0ac: 6299                 |         andq %r9, %r9     # val <= 0?
0x0ae: 71c100000000000000   |         jle Npos2           # if so, goto Npos:
0x0b7: c0f00100000000000000 |         iaddq $1, %rax      # count++
0x0c1:                      | Npos2:
0x0c1: 6288                 |         andq %r8, %r8     # val <= 0?
0x0c3: 71d600000000000000   |         jle Npos3           # if so, goto Npos:
0x0cc: c0f00100000000000000 |         iaddq $1, %rax      # count++
0x0d6:                      | Npos3:
0x0d6: 62bb                 |         andq %r11, %r11     # val <= 0?
0x0d8: 71eb00000000000000   |         jle Npos4           # if so, goto Npos:
0x0e1: c0f00100000000000000 |         iaddq $1, %rax      # count++
0x0eb:                      | Npos4:
0x0eb: c0f72000000000000000 | 	    iaddq $32, %rdi		 # src += 32
0x0f5: c0f62000000000000000 | 	    iaddq $32, %rsi	     # dst += 32
0x0ff: c0f2fcffffffffffffff |         iaddq $-4, %rdx      # len -= 4
0x109: 764700000000000000   | 	    jg Loop1		         # if so, goto Loop:
0x112:                      | Done1:
0x112: c0f20300000000000000 |         iaddq $3,%rdx
0x11c: 717501000000000000   |         jle Done2
0x125:                      | Loop2:
0x125: 50a70000000000000000 |         mrmovq (%rdi), %r10 # read val from src...
0x12f: 40a60000000000000000 |         rmmovq %r10, (%rsi) # ...and store it to dst
0x139: 62aa                 |         andq %r10, %r10     # val <= 0?
0x13b: 714e01000000000000   |         jle Npos5           # if so, goto Npos:
0x144: c0f00100000000000000 |         iaddq $1, %rax      # count++
0x14e:                      | Npos5:
0x14e: c0f70800000000000000 |         iaddq $8, %rdi        # src += 32
0x158: c0f60800000000000000 |         iaddq $8, %rsi        # dst += 32
0x162: c0f2ffffffffffffffff |         iaddq $-1, %rdx      # len -= 4
0x16c: 762501000000000000   |         jg Loop2                 # if so, goto Loop:
0x175:                      | Done2:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x175: 90                   | 	    ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x176:                      | End:
                            | #/* $end ncopy-ys */
0x176:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x178:                      | 	.align 8
0x178:                      | src:
0x178: 0100000000000000     | 	.quad 1
0x180: 0200000000000000     | 	.quad 2
0x188: fdffffffffffffff     | 	.quad -3
0x190: fcffffffffffffff     | 	.quad -4
0x198: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1a0:                      | 	.align 16
0x1a0:                      | Predest:
0x1a0: fadebc0000000000     | 	.quad 0xbcdefa
0x1a8:                      | dest:
0x1a8: abefcd0000000000     | 	.quad 0xcdefab
0x1b0: abefcd0000000000     | 	.quad 0xcdefab
0x1b8: abefcd0000000000     | 	.quad 0xcdefab
0x1c0: abefcd0000000000     | 	.quad 0xcdefab
0x1c8:                      | Postdest:
0x1c8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1d0:                      | .align 8
                            | # Run time stack
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
                            | 
0x250:                      | Stack:
